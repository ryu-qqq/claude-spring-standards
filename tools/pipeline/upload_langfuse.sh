#!/bin/bash
# LangFuse ÏóÖÎ°úÎìú Ïä§ÌÅ¨Î¶ΩÌä∏
#
# Ïö©ÎèÑ: Claude Code Î∞è Cascade Î°úÍ∑∏Î•º LangFuseÎ°ú ÏóÖÎ°úÎìú
# SSOT: Workflow upload-langfuse.mdÏùò Ïã§Ï†ú Íµ¨ÌòÑÏ≤¥

set -e  # ÏóêÎü¨ Î∞úÏÉù Ïãú Ï¶âÏãú Ï¢ÖÎ£å

# ÏÉâÏÉÅ ÏΩîÎìú
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ ÎîîÎ†âÌÜ†Î¶¨
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

echo -e "${BLUE}üöÄ LangFuse Upload Pipeline${NC}"
echo "   Project: $PROJECT_ROOT"
echo ""

# ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏
check_env_vars() {
    if [ -z "$LANGFUSE_PUBLIC_KEY" ]; then
        echo -e "${RED}‚ùå Error: LANGFUSE_PUBLIC_KEY not set${NC}"
        echo ""
        echo "   Set environment variables:"
        echo "   export LANGFUSE_PUBLIC_KEY='pk-lf-...'"
        echo "   export LANGFUSE_SECRET_KEY='sk-lf-...'"
        echo "   export LANGFUSE_HOST='https://cloud.langfuse.com'"
        echo ""
        return 1
    fi

    if [ -z "$LANGFUSE_SECRET_KEY" ]; then
        echo -e "${RED}‚ùå Error: LANGFUSE_SECRET_KEY not set${NC}"
        return 1
    fi

    echo -e "${GREEN}‚úÖ Environment variables configured${NC}"
    echo "   Host: ${LANGFUSE_HOST:-https://cloud.langfuse.com}"
    echo ""
    return 0
}

# Python ÌôïÏù∏
check_python() {
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}‚ùå Error: python3 not found${NC}"
        return 1
    fi

    echo -e "${GREEN}‚úÖ Python 3 available${NC}"
    echo "   Version: $(python3 --version)"
    echo ""
    return 0
}

# Î°úÍ∑∏ ÌååÏùº ÌôïÏù∏
check_logs() {
    local claude_logs="$PROJECT_ROOT/.claude/hooks/logs/hook-execution.jsonl"
    local cascade_logs="$PROJECT_ROOT/.cascade/metrics.jsonl"

    if [ ! -f "$claude_logs" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Claude logs not found${NC}"
        echo "   Path: $claude_logs"
        echo "   Note: Logs are created after first Hook execution"
        echo ""
    else
        local log_size=$(wc -l < "$claude_logs")
        echo -e "${GREEN}‚úÖ Claude logs found${NC}"
        echo "   Path: $claude_logs"
        echo "   Events: $log_size"
        echo ""
    fi

    if [ ! -f "$cascade_logs" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Cascade logs not found (optional)${NC}"
        echo "   Path: $cascade_logs"
        echo ""
    else
        echo -e "${GREEN}‚úÖ Cascade logs found${NC}"
        echo "   Path: $cascade_logs"
        echo ""
    fi
}

# 1Îã®Í≥Ñ: Î°úÍ∑∏ ÏßëÍ≥Ñ
aggregate_logs() {
    echo -e "${BLUE}üìä Step 1: Aggregating logs...${NC}"
    echo ""

    local output_file="$PROJECT_ROOT/langfuse-data.json"

    python3 "$PROJECT_ROOT/scripts/langfuse/aggregate-logs.py" \
        --claude-logs "$PROJECT_ROOT/.claude/hooks/logs/hook-execution.jsonl" \
        --cascade-logs "$PROJECT_ROOT/.cascade/metrics.jsonl" \
        --output "$output_file" \
        --anonymize

    if [ $? -eq 0 ]; then
        echo ""
        echo -e "${GREEN}‚úÖ Log aggregation complete${NC}"
        echo "   Output: $output_file"

        # ÌÜµÍ≥Ñ Ï∂úÎ†•
        if command -v jq &> /dev/null; then
            local traces=$(jq '.traces | length' "$output_file")
            local observations=$(jq '.observations | length' "$output_file")
            echo "   Traces: $traces"
            echo "   Observations: $observations"
        fi
        echo ""
        return 0
    else
        echo -e "${RED}‚ùå Log aggregation failed${NC}"
        return 1
    fi
}

# 2Îã®Í≥Ñ: LangFuse ÏóÖÎ°úÎìú
upload_to_langfuse() {
    echo -e "${BLUE}üì§ Step 2: Uploading to LangFuse...${NC}"
    echo ""

    local input_file="$PROJECT_ROOT/langfuse-data.json"

    python3 "$PROJECT_ROOT/scripts/langfuse/upload-to-langfuse.py" \
        --input "$input_file"

    if [ $? -eq 0 ]; then
        echo ""
        echo -e "${GREEN}‚úÖ Upload complete!${NC}"
        echo ""
        echo -e "${BLUE}üìä View your metrics:${NC}"
        echo "   ${LANGFUSE_HOST:-https://cloud.langfuse.com}"
        echo ""
        return 0
    else
        echo -e "${RED}‚ùå Upload failed${NC}"
        return 1
    fi
}

# Î©îÏù∏ Ïã§Ìñâ
main() {
    cd "$PROJECT_ROOT"

    # ÏÇ¨Ï†Ñ Í≤ÄÏ¶ù
    check_python || exit 1
    check_env_vars || exit 1
    check_logs

    # Ïã§Ìñâ
    aggregate_logs || exit 1
    upload_to_langfuse || exit 1

    echo -e "${GREEN}‚ú® LangFuse upload pipeline completed successfully!${NC}"
    echo ""
}

# Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
main "$@"
