#!/bin/bash

# =====================================================
# Claude Code Hook: after-tool-use
# Trigger: Write/Edit ÎèÑÍµ¨ ÏÇ¨Ïö© ÏßÅÌõÑ
# Strategy: Cache-based validation with validation-helper.py
# =====================================================

# Î°úÍ∑∏ ÎîîÎ†âÌÜ†Î¶¨
LOG_DIR=".claude/hooks/logs"
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/hook-execution.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# ÌîÑÎ°úÏ†ùÌä∏Î™Ö Í∞ÄÏ†∏Ïò§Í∏∞
PROJECT_NAME=$(basename "$(pwd)")

# ÏûÖÎ†• ÏùΩÍ∏∞ (Claude CodeÍ∞Ä Ï†ÑÎã¨ÌïòÎäî JSON)
TOOL_DATA=$(cat)

# ÌååÏùº Í≤ΩÎ°ú Ï∂îÏ∂ú (jq ÏÇ¨Ïö©ÏúºÎ°ú ÏïàÏ†ÑÌïú JSON ÌååÏã±)
FILE_PATH=$(echo "$TOOL_DATA" | jq -r '.file_path // empty')

if [[ -z "$FILE_PATH" ]]; then
    # ÌååÏùº Í≤ΩÎ°úÍ∞Ä ÏóÜÏúºÎ©¥ Ïä§ÌÇµ
    exit 0
fi

# Î°úÍ∑∏ Í∏∞Î°ù
echo "" >> "$LOG_FILE"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >> "$LOG_FILE"
echo "[$TIMESTAMP] üîç CODE GENERATION DETECTED" >> "$LOG_FILE"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >> "$LOG_FILE"
echo "" >> "$LOG_FILE"
echo "‚Üí PROJECT: $PROJECT_NAME" >> "$LOG_FILE"
echo "‚Üí HOOK: after-tool-use triggered" >> "$LOG_FILE"
echo "‚Üí GENERATED FILE: $FILE_PATH" >> "$LOG_FILE"

# ÌååÏùºÏù¥ Ïã§Ï†úÎ°ú Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
if [[ ! -f "$FILE_PATH" ]]; then
    echo "  ‚Üí ‚ö†Ô∏è File not found, skipping validation" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
    exit 0
fi

# ÌååÏùº Ï†ïÎ≥¥ Î°úÍ∑∏
FILE_LINES=$(wc -l < "$FILE_PATH" | tr -d ' ')
echo "  ‚Üí File size: $FILE_LINES lines" >> "$LOG_FILE"
echo "" >> "$LOG_FILE"

# =====================================================
# Phase 1: Layer Í∞êÏßÄ (ÌååÏùº Í≤ΩÎ°ú Í∏∞Î∞ò)
# =====================================================

LAYER="unknown"

echo "‚Üí LAYER DETECTION:" >> "$LOG_FILE"

# case Î¨∏ÏúºÎ°ú Í∞ÄÎèÖÏÑ± Î∞è Ïú†ÏßÄÎ≥¥ÏàòÏÑ± Í∞úÏÑ†
case "$FILE_PATH" in
    *domain/*model*)
        LAYER="domain"
        echo "  ‚Üí Layer: DOMAIN (from path pattern)" >> "$LOG_FILE"
        ;;
    *adapter/in/web*)
        LAYER="adapter-rest"
        echo "  ‚Üí Layer: ADAPTER-REST (from path pattern)" >> "$LOG_FILE"
        ;;
    *adapter/out/persistence*)
        LAYER="adapter-persistence"
        echo "  ‚Üí Layer: ADAPTER-PERSISTENCE (from path pattern)" >> "$LOG_FILE"
        ;;
    *application/*)
        LAYER="application"
        echo "  ‚Üí Layer: APPLICATION (from path pattern)" >> "$LOG_FILE"
        ;;
    *test/*)
        LAYER="testing"
        echo "  ‚Üí Layer: TESTING (from path pattern)" >> "$LOG_FILE"
        ;;
    *)
        echo "  ‚Üí Layer: UNKNOWN (no pattern match)" >> "$LOG_FILE"
        ;;
esac

echo "" >> "$LOG_FILE"

# =====================================================
# Phase 2: Cache-based Validation (validation-helper.py)
# =====================================================

VALIDATOR_SCRIPT=".claude/hooks/scripts/validation-helper.py"

if [[ -f "$VALIDATOR_SCRIPT" && "$LAYER" != "unknown" ]]; then
    # Python Í≤ÄÏ¶ùÍ∏∞ Ïã§Ìñâ
    python3 "$VALIDATOR_SCRIPT" "$FILE_PATH" "$LAYER" 2>> "$LOG_FILE"

    # Í≤ÄÏ¶ù ÏÑ±Í≥µ Ïó¨Î∂ÄÎäî Python Ïä§ÌÅ¨Î¶ΩÌä∏ Ï∂úÎ†•ÏúºÎ°ú ÌåêÎã®
else
    echo "‚Üí FALLBACK VALIDATION:" >> "$LOG_FILE"
    echo "  ‚Üí Using basic validators (cache not available)" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"

    # ===== Fallback: Basic Critical Validators =====

    VALIDATION_FAILED=false

    # 1. Lombok Í∏àÏßÄ Í≤ÄÏ¶ù
    if grep -qE "@(Data|Builder|Getter|Setter|AllArgsConstructor|NoArgsConstructor|RequiredArgsConstructor)" "$FILE_PATH"; then
        echo "  ‚ùå FAILED: Lombok annotation detected!" >> "$LOG_FILE"
        VALIDATION_FAILED=true
        cat << EOF

---
‚ö†Ô∏è **Validation Failed: Lombok ÏÇ¨Ïö© Í∞êÏßÄ**

**ÏúÑÎ∞ò ÌååÏùº**: \`$FILE_PATH\`

**Î¨∏Ï†ú**: Lombok Ïñ¥ÎÖ∏ÌÖåÏù¥ÏÖòÏù¥ Î∞úÍ≤¨ÎêòÏóàÏäµÎãàÎã§.
- @Data, @Builder, @Getter, @Setter Îì± Î™®Îì† Lombok ÏÇ¨Ïö© Í∏àÏßÄ

**Ìï¥Í≤∞ Î∞©Î≤ï**:
1. Lombok Ïñ¥ÎÖ∏ÌÖåÏù¥ÏÖò Ï†úÍ±∞
2. Pure Java getter/setter ÏàòÎèô ÏûëÏÑ±

**Ï∞∏Í≥†**: \`docs/coding_convention/\` - Zero-Tolerance Í∑úÏπô

---

EOF
    else
        echo "  ‚úÖ PASSED: No Lombok" >> "$LOG_FILE"
    fi

    # 2. Javadoc Í≤ÄÏ¶ù
    if ! grep -q "@author" "$FILE_PATH"; then
        echo "  ‚ùå FAILED: Missing @author in Javadoc!" >> "$LOG_FILE"
        VALIDATION_FAILED=true
        cat << EOF

---
‚ö†Ô∏è **Validation Failed: Javadoc @author ÎàÑÎùΩ**

**ÏúÑÎ∞ò ÌååÏùº**: \`$FILE_PATH\`

**Î¨∏Ï†ú**: @author ÌÉúÍ∑∏Í∞Ä ÏóÜÏäµÎãàÎã§.

**Ìï¥Í≤∞ Î∞©Î≤ï**:
\`\`\`java
/**
 * ÌÅ¥ÎûòÏä§ ÏÑ§Î™Ö
 *
 * @author Claude
 * @since $(date '+%Y-%m-%d')
 */
\`\`\`

---

EOF
    else
        echo "  ‚úÖ PASSED: Javadoc @author present" >> "$LOG_FILE"
    fi

    # 3. Layer-Specific: Domain Î†àÏù¥Ïñ¥
    if [[ "$LAYER" == "domain" ]]; then
        echo "  ‚Üí Running domain validators..." >> "$LOG_FILE"

        # Spring/JPA annotation Í≤ÄÏ¶ù
        if grep -qE "@(Entity|Table|Column|Service|Repository|Transactional)" "$FILE_PATH"; then
            echo "  ‚ùå FAILED: Spring/JPA annotation in domain!" >> "$LOG_FILE"
            VALIDATION_FAILED=true
            cat << EOF

---
‚ö†Ô∏è **Validation Failed: DomainÏóêÏÑú Spring/JPA ÏÇ¨Ïö© Í∞êÏßÄ**

**ÏúÑÎ∞ò ÌååÏùº**: \`$FILE_PATH\`

**Î¨∏Ï†ú**: Domain Î†àÏù¥Ïñ¥Îäî ÏàúÏàò JavaÎßå ÏÇ¨Ïö©Ìï¥Ïïº Ìï©ÎãàÎã§.

**Í∏àÏßÄ**:
- @Entity, @Table, @Column (JPA)
- @Service, @Repository, @Transactional (Spring)

**Ï∞∏Í≥†**: DomainÏùÄ Ïù∏ÌîÑÎùºÏóê ÏùòÏ°¥ÌïòÏßÄ ÏïäÏäµÎãàÎã§.

---

EOF
        else
            echo "  ‚úÖ PASSED: Pure Java (no Spring/JPA)" >> "$LOG_FILE"
        fi
    fi

    # ÏµúÏ¢Ö Í≤∞Í≥º
    if [[ "$VALIDATION_FAILED" == true ]]; then
        echo "  ‚Üí FINAL RESULT: VALIDATION FAILED ‚ùå" >> "$LOG_FILE"
        echo ""
        echo "üí° ÏΩîÎìúÎ•º ÏàòÏ†ïÌïú ÌõÑ Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî."
        echo ""
    else
        echo "  ‚Üí FINAL RESULT: ALL VALIDATIONS PASSED ‚úÖ" >> "$LOG_FILE"
        cat << EOF

---
‚úÖ **Validation Passed**

ÌååÏùº: \`$FILE_PATH\`

Î™®Îì† Í∑úÏπôÏùÑ Ï§ÄÏàòÌï©ÎãàÎã§!

---

EOF
    fi
fi

# ÏÑ∏ÏÖò Ï¢ÖÎ£å Î°úÍ∑∏
echo "" >> "$LOG_FILE"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >> "$LOG_FILE"
echo "‚úÖ SESSION COMPLETE" >> "$LOG_FILE"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >> "$LOG_FILE"
echo "" >> "$LOG_FILE"
