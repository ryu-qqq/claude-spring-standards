#!/bin/bash

# =====================================================
# Claude Code Hook: user-prompt-submit (JSON Logging)
# Trigger: ÏÇ¨Ïö©ÏûêÍ∞Ä ÌîÑÎ°¨ÌîÑÌä∏Î•º Ï†úÏ∂úÌï† Îïå
# Strategy: Keyword ‚Üí Layer ‚Üí inject-rules.py (Cache-based)
# Bash 3.2 Ìò∏Ìôò (macOS Í∏∞Î≥∏ Bash)
# =====================================================

# Î°úÍ∑∏ Ìó¨Ìçº Í≤ΩÎ°ú
LOG_HELPER=".claude/hooks/scripts/log-helper.py"

# ÏÑ∏ÏÖò ID
SESSION_ID="$(date +%s)-$$"
PROJECT_NAME=$(basename "$(pwd)")

# ÏûÖÎ†• ÏùΩÍ∏∞
USER_INPUT=$(cat)

# JSON Î°úÍ∑∏ Ìï®Ïàò
log_event() {
    echo "$2" | python3 "$LOG_HELPER" "$1" 2>/dev/null
}

# ÏÑ∏ÏÖò ÏãúÏûë
log_event "session_start" "{\"session_id\":\"$SESSION_ID\",\"project\":\"$PROJECT_NAME\",\"hook\":\"user-prompt-submit\",\"user_command\":\"$USER_INPUT\"}"

# ==================== Context Î∂ÑÏÑù ====================

CONTEXT_SCORE=0
DETECTED_LAYERS=()
DETECTED_KEYWORDS=()
PRIORITY_FILTER=""

# Keyword ‚Üí Layer Îß§Ìïë Ìï®Ïàò (Bash 3.2 Ìò∏Ìôò)
get_layer_from_keyword() {
    local keyword="$1"

    case "$keyword" in
        # Domain layer
        aggregate|entity|value*object|domain*event|getter|factory|policy)
            echo "domain"
            ;;
        # Application layer
        usecase|service|command|query|transaction|assembler|spring|proxy|orchestration)
            echo "application"
            ;;
        # Adapter-REST layer (adapter-in Ìè¨Ìï®)
        controller|rest*api|endpoint|adapter*in|validation|request|response|handling)
            echo "adapter-rest"
            ;;
        # Adapter-Persistence layer (adapter-out, persistence-mysql Ìè¨Ìï®)
        repository|jpa|entity*mapping|adapter*out|persistence*mysql|persistence*postgresql|persistence*mongo|querydsl|batch|specification)
            echo "adapter-persistence"
            ;;
        # Testing
        test|archunit|testcontainers|benchmark|fixture|mother|builder)
            echo "testing"
            ;;
        # Java21
        record|sealed|virtual|threads|async)
            echo "java21"
            ;;
        # Enterprise
        dto|mapper|cache|event|circuit*breaker|resilience|saga)
            echo "enterprise"
            ;;
        # Error handling
        exception|error)
            echo "error-handling"
            ;;
        *)
            echo ""
            ;;
    esac
}

# ÌÇ§ÏõåÎìú Î™©Î°ù (ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Ìå®ÌÇ§ÏßÄ Íµ¨Ï°∞ Ìè¨Ìï®)
KEYWORDS="aggregate entity value.object value_object valueobject domain.event domain_event domainevent getter factory policy usecase service command query transaction assembler spring proxy orchestration controller rest.api rest_api restapi endpoint adapter-in adapter_in adapterin validation request response handling repository jpa entity.mapping entity_mapping entitymapping adapter-out adapter_out adapterout persistence-mysql persistence_mysql persistencemysql persistence-postgresql persistence-mongo querydsl batch specification test archunit testcontainers benchmark fixture mother builder record sealed virtual threads async dto mapper cache event circuit.breaker circuit_breaker circuitbreaker resilience saga exception error"

# Primary Keywords Í≤ÄÏÉâ (30Ï†ê)
for keyword in $KEYWORDS; do
    # . ÏôÄ _ Î•º Í≥µÎ∞±ÏúºÎ°úÎèÑ Îß§Ïπ≠ÎêòÎèÑÎ°ù Ìå®ÌÑ¥ Î≥ÄÌôò
    pattern=$(echo "$keyword" | sed 's/[._]/ /g')

    if echo "$USER_INPUT" | grep -qiE "$pattern"; then
        layer=$(get_layer_from_keyword "$keyword")

        if [ -n "$layer" ]; then
            CONTEXT_SCORE=$((CONTEXT_SCORE + 30))

            # Î†àÏù¥Ïñ¥ Ï§ëÎ≥µ Î∞©ÏßÄ
            if [[ ! " ${DETECTED_LAYERS[@]} " =~ " ${layer} " ]]; then
                DETECTED_LAYERS+=("$layer")
            fi

            DETECTED_KEYWORDS+=("$keyword")
        fi
    fi
done

# ÌïúÍ∏Ä ÌÇ§ÏõåÎìú Í≤ÄÏÉâ
if echo "$USER_INPUT" | grep -q "Ïï†Í∑∏Î¶¨Í≤åÏù¥Ìä∏"; then
    CONTEXT_SCORE=$((CONTEXT_SCORE + 30))
    if [[ ! " ${DETECTED_LAYERS[@]} " =~ " domain " ]]; then
        DETECTED_LAYERS+=("domain")
    fi
    DETECTED_KEYWORDS+=("Ïï†Í∑∏Î¶¨Í≤åÏù¥Ìä∏")
fi

if echo "$USER_INPUT" | grep -q "Ïª®Ìä∏Î°§Îü¨"; then
    CONTEXT_SCORE=$((CONTEXT_SCORE + 30))
    if [[ ! " ${DETECTED_LAYERS[@]} " =~ " adapter-rest " ]]; then
        DETECTED_LAYERS+=("adapter-rest")
    fi
    DETECTED_KEYWORDS+=("Ïª®Ìä∏Î°§Îü¨")
fi

if echo "$USER_INPUT" | grep -q "ÌÖåÏä§Ìä∏"; then
    CONTEXT_SCORE=$((CONTEXT_SCORE + 30))
    if [[ ! " ${DETECTED_LAYERS[@]} " =~ " testing " ]]; then
        DETECTED_LAYERS+=("testing")
    fi
    DETECTED_KEYWORDS+=("ÌÖåÏä§Ìä∏")
fi

# Secondary Keywords (15Ï†ê)
if echo "$USER_INPUT" | grep -qiE "(domain|ÎèÑÎ©îÏù∏)"; then
    CONTEXT_SCORE=$((CONTEXT_SCORE + 15))
    DETECTED_KEYWORDS+=("domain_context")
fi

if echo "$USER_INPUT" | grep -qiE "(api|rest)"; then
    CONTEXT_SCORE=$((CONTEXT_SCORE + 15))
    DETECTED_KEYWORDS+=("api_context")
fi

if echo "$USER_INPUT" | grep -qiE "(persistence|ÏòÅÏÜçÏÑ±)"; then
    CONTEXT_SCORE=$((CONTEXT_SCORE + 15))
    DETECTED_KEYWORDS+=("persistence_context")
fi

if echo "$USER_INPUT" | grep -qiE "(transaction|Ìä∏ÎûúÏû≠ÏÖò)"; then
    CONTEXT_SCORE=$((CONTEXT_SCORE + 15))
    DETECTED_KEYWORDS+=("transaction_context")
fi

if echo "$USER_INPUT" | grep -qiE "(validation|Í≤ÄÏ¶ù)"; then
    CONTEXT_SCORE=$((CONTEXT_SCORE + 15))
    DETECTED_KEYWORDS+=("validation_context")
fi

# Zero-Tolerance Keywords (20Ï†ê)
if echo "$USER_INPUT" | grep -qiE "(lombok|getter\.chaining|law\.of\.demeter|@transactional|zero\.tolerance)"; then
    PRIORITY_FILTER="critical"
    CONTEXT_SCORE=$((CONTEXT_SCORE + 20))
    DETECTED_KEYWORDS+=("zero_tolerance")
fi

# ÌÇ§ÏõåÎìú Î∂ÑÏÑù Í≤∞Í≥º Î°úÍ∑∏
LAYERS_JSON=$(printf '%s\n' "${DETECTED_LAYERS[@]}" | jq -R . | jq -s . 2>/dev/null || echo "[]")
KEYWORDS_JSON=$(printf '%s\n' "${DETECTED_KEYWORDS[@]}" | jq -R . | jq -s . 2>/dev/null || echo "[]")

log_event "keyword_analysis" "{\"session_id\":\"$SESSION_ID\",\"context_score\":$CONTEXT_SCORE,\"threshold\":25,\"detected_layers\":$LAYERS_JSON,\"detected_keywords\":$KEYWORDS_JSON,\"priority_filter\":\"$PRIORITY_FILTER\"}"

# ==================== Í∑úÏπô Ï£ºÏûÖ ====================

if [[ $CONTEXT_SCORE -ge 25 ]]; then
    log_event "decision" "{\"session_id\":\"$SESSION_ID\",\"action\":\"cache_injection\",\"reason\":\"score_above_threshold\"}"

    INJECT_SCRIPT=".claude/commands/lib/inject-rules.py"

    if [[ -f "$INJECT_SCRIPT" ]]; then
        for layer in "${DETECTED_LAYERS[@]}"; do
            # inject-rules.py Ìò∏Ï∂ú (Î≥ÑÎèÑÎ°ú ÏûêÏ≤¥ JSON Î°úÍ∑∏ ÏûëÏÑ±)
            if [[ -n "$PRIORITY_FILTER" ]]; then
                python3 "$INJECT_SCRIPT" "$layer" "$PRIORITY_FILTER"
            else
                python3 "$INJECT_SCRIPT" "$layer"
            fi
        done

        log_event "cache_injection_complete" "{\"session_id\":\"$SESSION_ID\",\"layers_count\":${#DETECTED_LAYERS[@]}}"

        # Î†àÏù¥Ïñ¥Í∞Ä ÏóÜÏúºÎ©¥ ÏùºÎ∞ò Í∑úÏπô
        if [[ ${#DETECTED_LAYERS[@]} -eq 0 ]]; then
            cat << 'EOF'

---

## üéØ Í∏∞Î≥∏ ÌîÑÎ°úÏ†ùÌä∏ Í∑úÏπô (ÏûêÎèô Ï£ºÏûÖÎê®)

### ‚ùå Zero-Tolerance Í∑úÏπô
- **Lombok Ï†àÎåÄ Í∏àÏßÄ**: @Data, @Builder, @Getter, @Setter Îì± Î™®Îì† Lombok Ïñ¥ÎÖ∏ÌÖåÏù¥ÏÖò
- **Javadoc ÌïÑÏàò**: Î™®Îì† public ÌÅ¥ÎûòÏä§/Î©îÏÑúÎìúÏóê @author, @since Ìè¨Ìï®
- **Ìä∏ÎûúÏû≠ÏÖò Í≤ΩÍ≥Ñ**: @Transactional ÎÇ¥ Ïô∏Î∂Ä API Ìò∏Ï∂ú Ï†àÎåÄ Í∏àÏßÄ

### ‚úÖ ÌïÑÏàò Í∑úÏπô
- **Pure Java**: Domain Î†àÏù¥Ïñ¥Îäî ÏàúÏàò JavaÎßå ÏÇ¨Ïö©
- **Law of Demeter**: Getter Ï≤¥Ïù¥Îãù Í∏àÏßÄ

---

EOF
        fi
    else
        log_event "error" "{\"session_id\":\"$SESSION_ID\",\"message\":\"inject-rules.py not found\"}"
    fi
else
    log_event "decision" "{\"session_id\":\"$SESSION_ID\",\"action\":\"skip_injection\",\"reason\":\"score_below_threshold\"}"
fi

# ÏõêÎ≥∏ ÏûÖÎ†• Î∞òÌôò
echo "$USER_INPUT"
