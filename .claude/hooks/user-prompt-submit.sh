#!/bin/bash

# =====================================================
# Claude Code Hook: user-prompt-submit (JSON Logging)
# Trigger: ÏÇ¨Ïö©ÏûêÍ∞Ä ÌîÑÎ°¨ÌîÑÌä∏Î•º Ï†úÏ∂úÌï† Îïå
# Strategy: Keyword ‚Üí Layer ‚Üí inject-rules.py (Cache-based)
# =====================================================

# Î°úÍ∑∏ Ìó¨Ìçº Í≤ΩÎ°ú
LOG_HELPER=".claude/hooks/scripts/log-helper.py"

# ÏÑ∏ÏÖò ID
SESSION_ID="$(date +%s)-$$"
PROJECT_NAME=$(basename "$(pwd)")

# ÏûÖÎ†• ÏùΩÍ∏∞
USER_INPUT=$(cat)

# JSON Î°úÍ∑∏ Ìï®Ïàò
log_event() {
    echo "$2" | python3 "$LOG_HELPER" "$1" 2>/dev/null
}

# ÏÑ∏ÏÖò ÏãúÏûë
log_event "session_start" "{\"session_id\":\"$SESSION_ID\",\"project\":\"$PROJECT_NAME\",\"hook\":\"user-prompt-submit\",\"user_command\":\"$USER_INPUT\"}"

# ==================== Context Î∂ÑÏÑù ====================

CONTEXT_SCORE=0
DETECTED_LAYERS=()
DETECTED_KEYWORDS=()
PRIORITY_FILTER=""

# Keyword ‚Üí Layer Îß§Ìïë
declare -A LAYER_KEYWORDS=(
    ["aggregate"]="domain"
    ["Ïï†Í∑∏Î¶¨Í≤åÏù¥Ìä∏"]="domain"
    ["entity"]="domain"
    ["value.object"]="domain"
    ["domain.event"]="domain"
    ["usecase"]="application"
    ["service"]="application"
    ["command"]="application"
    ["query"]="application"
    ["transaction"]="application"
    ["controller"]="adapter-rest"
    ["Ïª®Ìä∏Î°§Îü¨"]="adapter-rest"
    ["rest.api"]="adapter-rest"
    ["endpoint"]="adapter-rest"
    ["repository"]="adapter-persistence"
    ["jpa"]="adapter-persistence"
    ["entity.mapping"]="adapter-persistence"
    ["test"]="testing"
    ["ÌÖåÏä§Ìä∏"]="testing"
    ["record"]="java21"
    ["sealed"]="java21"
    ["dto"]="enterprise"
    ["mapper"]="enterprise"
    ["exception"]="error-handling"
    ["error"]="error-handling"
)

# Secondary Keywords (15Ï†ê)
if echo "$USER_INPUT" | grep -qiE "(domain|ÎèÑÎ©îÏù∏)"; then
    CONTEXT_SCORE=$((CONTEXT_SCORE + 15))
    DETECTED_KEYWORDS+=("domain_context")
fi

if echo "$USER_INPUT" | grep -qiE "(api|rest)"; then
    CONTEXT_SCORE=$((CONTEXT_SCORE + 15))
    DETECTED_KEYWORDS+=("api_context")
fi

# Primary Keywords (30Ï†ê)
for keyword in "${!LAYER_KEYWORDS[@]}"; do
    regex_keyword=$(echo "$keyword" | sed 's/\./ /g')

    if echo "$USER_INPUT" | grep -qiE "$regex_keyword"; then
        layer="${LAYER_KEYWORDS[$keyword]}"
        CONTEXT_SCORE=$((CONTEXT_SCORE + 30))

        if [[ ! " ${DETECTED_LAYERS[@]} " =~ " ${layer} " ]]; then
            DETECTED_LAYERS+=("$layer")
        fi

        DETECTED_KEYWORDS+=("$keyword")
    fi
done

# Zero-Tolerance Keywords (20Ï†ê)
if echo "$USER_INPUT" | grep -qiE "(lombok|getter.chaining|@transactional|zero.tolerance)"; then
    PRIORITY_FILTER="critical"
    CONTEXT_SCORE=$((CONTEXT_SCORE + 20))
    DETECTED_KEYWORDS+=("zero_tolerance")
fi

# ÌÇ§ÏõåÎìú Î∂ÑÏÑù Í≤∞Í≥º Î°úÍ∑∏
LAYERS_JSON=$(printf '%s\n' "${DETECTED_LAYERS[@]}" | jq -R . | jq -s .)
KEYWORDS_JSON=$(printf '%s\n' "${DETECTED_KEYWORDS[@]}" | jq -R . | jq -s .)

log_event "keyword_analysis" "{\"session_id\":\"$SESSION_ID\",\"context_score\":$CONTEXT_SCORE,\"threshold\":25,\"detected_layers\":$LAYERS_JSON,\"detected_keywords\":$KEYWORDS_JSON,\"priority_filter\":\"$PRIORITY_FILTER\"}"

# ==================== Í∑úÏπô Ï£ºÏûÖ ====================

if [[ $CONTEXT_SCORE -ge 25 ]]; then
    log_event "decision" "{\"session_id\":\"$SESSION_ID\",\"action\":\"cache_injection\",\"reason\":\"score_above_threshold\"}"

    INJECT_SCRIPT=".claude/commands/lib/inject-rules.py"

    if [[ -f "$INJECT_SCRIPT" ]]; then
        for layer in "${DETECTED_LAYERS[@]}"; do
            # inject-rules.py Ìò∏Ï∂ú (Î≥ÑÎèÑÎ°ú ÏûêÏ≤¥ JSON Î°úÍ∑∏ ÏûëÏÑ±)
            if [[ -n "$PRIORITY_FILTER" ]]; then
                python3 "$INJECT_SCRIPT" "$layer" "$PRIORITY_FILTER"
            else
                python3 "$INJECT_SCRIPT" "$layer"
            fi
        done

        log_event "cache_injection_complete" "{\"session_id\":\"$SESSION_ID\",\"layers_count\":${#DETECTED_LAYERS[@]}}"

        # Î†àÏù¥Ïñ¥Í∞Ä ÏóÜÏúºÎ©¥ ÏùºÎ∞ò Í∑úÏπô
        if [[ ${#DETECTED_LAYERS[@]} -eq 0 ]]; then
            cat << 'EOF'

---

## üéØ Í∏∞Î≥∏ ÌîÑÎ°úÏ†ùÌä∏ Í∑úÏπô (ÏûêÎèô Ï£ºÏûÖÎê®)

### ‚ùå Zero-Tolerance Í∑úÏπô
- **Lombok Ï†àÎåÄ Í∏àÏßÄ**: @Data, @Builder, @Getter, @Setter Îì± Î™®Îì† Lombok Ïñ¥ÎÖ∏ÌÖåÏù¥ÏÖò
- **Javadoc ÌïÑÏàò**: Î™®Îì† public ÌÅ¥ÎûòÏä§/Î©îÏÑúÎìúÏóê @author, @since Ìè¨Ìï®
- **Ìä∏ÎûúÏû≠ÏÖò Í≤ΩÍ≥Ñ**: @Transactional ÎÇ¥ Ïô∏Î∂Ä API Ìò∏Ï∂ú Ï†àÎåÄ Í∏àÏßÄ

### ‚úÖ ÌïÑÏàò Í∑úÏπô
- **Pure Java**: Domain Î†àÏù¥Ïñ¥Îäî ÏàúÏàò JavaÎßå ÏÇ¨Ïö©
- **Law of Demeter**: Getter Ï≤¥Ïù¥Îãù Í∏àÏßÄ

---

EOF
        fi
    else
        log_event "error" "{\"session_id\":\"$SESSION_ID\",\"message\":\"inject-rules.py not found\"}"
    fi
else
    log_event "decision" "{\"session_id\":\"$SESSION_ID\",\"action\":\"skip_injection\",\"reason\":\"score_below_threshold\"}"
fi

# ÏõêÎ≥∏ ÏûÖÎ†• Î∞òÌôò
echo "$USER_INPUT"
