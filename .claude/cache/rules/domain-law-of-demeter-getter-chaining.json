{
  "id": "domain-law-of-demeter-getter-chaining",
  "path": "docs/coding_convention/02-domain-layer/law-of-demeter/01_getter-chaining-prohibition.md",
  "version": "1.0.0",
  "lastUpdated": "2025-10-17T10:30:00Z",
  "metadata": {
    "keywords": {
      "primary": ["getter", "chaining", "demeter", "law"],
      "secondary": ["encapsulation", "coupling", "domain"],
      "anti": ["getCustomer().getAddress()", "a.getB().getC()"]
    },
    "layer": "domain",
    "category": "law-of-demeter",
    "priority": "critical",
    "related": ["domain-encapsulation", "tell-dont-ask", "domain-aggregate-boundaries"],
    "validators": ["law-of-demeter-validator", "domain-validator"],
    "tokenEstimate": 320
  },
  "rules": {
    "prohibited": [
      "❌ `a.getB().getC().doX()` 형태의 다단계 호출 금지",
      "❌ 다른 애그리게이트 내부 컬렉션/엔티티의 내부 상태에 직접 접근 금지",
      "❌ DTO/엔티티 변환을 위해 도메인 깊은 구조를 탐색하는 코드 금지"
    ],
    "allowed": [
      "✅ Java Streams: stream(), map, filter, flatMap, collect",
      "✅ Optional: map, flatMap, orElse*, ifPresent*",
      "✅ Builder/Fluent API: Money.of(...).multiply(...).add(...)",
      "✅ BigDecimal/Math 연산 체이닝",
      "✅ JPA Lazy 프록시 초기화 목적의 단일 depth 접근"
    ],
    "patterns": [
      "Tell, Don't Ask: order.shippingZip() (X order.getCustomer().getAddress().getZip())",
      "의미 있는 VO 도입: 중첩 구조를 값 객체로 캡슐화",
      "Query 모델 분리: CQRS Read 모델로 조회 전용 케이스 분리"
    ]
  },
  "validation": {
    "pmdRule": "LawOfDemeterGetterChain",
    "checkstylePattern": "\\)\\.\\[a-zA-Z_\\]\\[a-zA-Z0-9_\\]*\\(\\)\\.",
    "errorMessage": "Getter 체이닝 감지: Law of Demeter 위반"
  },
  "examples": {
    "bad": "if (order.getCustomer().getAddress().getZip().startsWith(\"06\"))",
    "good": "if (order.isShippingToRegion(\"06\"))"
  }
}
