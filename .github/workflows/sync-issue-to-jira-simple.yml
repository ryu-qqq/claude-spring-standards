name: Sync GitHub Issue to Jira (Simple)

on:
  issues:
    types: [opened, edited, closed, reopened]

jobs:
  sync-to-jira:
    runs-on: ubuntu-latest
    
    steps:
      - name: Create or Update Jira Issue
        uses: actions/github-script@v7
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const https = require('https');
            const { URL } = require('url');
            
            const jiraBaseUrl = process.env.JIRA_BASE_URL;
            const jiraEmail = process.env.JIRA_USER_EMAIL;
            const jiraToken = process.env.JIRA_API_TOKEN;
            const projectKey = process.env.JIRA_PROJECT_KEY;
            
            const auth = Buffer.from(`${jiraEmail}:${jiraToken}`).toString('base64');
            
            // Helper function to make Jira API calls
            async function jiraRequest(path, method, body) {
              const url = new URL(path, jiraBaseUrl);
              
              return new Promise((resolve, reject) => {
                const options = {
                  method: method,
                  headers: {
                    'Authorization': `Basic ${auth}`,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                  }
                };
                
                const req = https.request(url, options, (res) => {
                  let data = '';
                  
                  res.on('data', (chunk) => {
                    data += chunk;
                  });
                  
                  res.on('end', () => {
                    if (res.statusCode >= 200 && res.statusCode < 300) {
                      resolve(data ? JSON.parse(data) : {});
                    } else {
                      reject(new Error(`Jira API error: ${res.statusCode} - ${data}`));
                    }
                  });
                });
                
                req.on('error', reject);
                
                if (body) {
                  req.write(JSON.stringify(body));
                }
                
                req.end();
              });
            }
            
            // Find Jira issue key from GitHub issue comments
            async function findJiraKey() {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const jiraKeyRegex = /\[([A-Z]+-\d+)\]/;
              for (const comment of comments.data) {
                const match = comment.body.match(jiraKeyRegex);
                if (match) {
                  return match[1];
                }
              }
              
              return null;
            }
            
            const action = context.payload.action;
            const issue = context.payload.issue;
            
            // GitHub 이슈 생성 시 Jira Task 생성
            if (action === 'opened') {
              console.log('Creating new Jira issue...');
              
              const jiraIssue = {
                fields: {
                  project: { key: projectKey },
                  summary: `[GH-${issue.number}] ${issue.title}`,
                  description: {
                    type: 'doc',
                    version: 1,
                    content: [
                      {
                        type: 'paragraph',
                        content: [
                          {
                            type: 'text',
                            text: 'Synced from GitHub Issue: ',
                            marks: [{ type: 'strong' }]
                          },
                          {
                            type: 'text',
                            text: issue.html_url,
                            marks: [{ type: 'link', attrs: { href: issue.html_url } }]
                          }
                        ]
                      },
                      {
                        type: 'heading',
                        attrs: { level: 3 },
                        content: [{ type: 'text', text: 'Description' }]
                      },
                      {
                        type: 'paragraph',
                        content: [{ type: 'text', text: issue.body || 'No description provided' }]
                      },
                      {
                        type: 'rule'
                      },
                      {
                        type: 'paragraph',
                        content: [
                          { type: 'text', text: `Created by: ${issue.user.login}`, marks: [{ type: 'em' }] }
                        ]
                      }
                    ]
                  },
                  issuetype: { name: 'Task' },
                  labels: issue.labels.map(label => label.name)
                }
              };
              
              try {
                const result = await jiraRequest('/rest/api/3/issue', 'POST', jiraIssue);
                const jiraKey = result.key;
                
                console.log(`Created Jira issue: ${jiraKey}`);
                
                // GitHub 이슈에 코멘트 추가
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `✅ Jira 이슈가 생성되었습니다: [${jiraKey}](${jiraBaseUrl}/browse/${jiraKey})`
                });
                
                // jira-synced 라벨 추가
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['jira-synced']
                });
                
              } catch (error) {
                console.error('Failed to create Jira issue:', error.message);
                core.setFailed(error.message);
              }
            }
            
            // GitHub 이슈 닫힘 시 Jira Task 완료 처리
            else if (action === 'closed') {
              const jiraKey = await findJiraKey();
              
              if (!jiraKey) {
                console.log('No Jira issue found to close');
                return;
              }
              
              console.log(`Closing Jira issue: ${jiraKey}`);
              
              try {
                // Get available transitions
                const transitions = await jiraRequest(`/rest/api/3/issue/${jiraKey}/transitions`, 'GET');
                
                // Find "Done" transition
                const doneTransition = transitions.transitions.find(t => 
                  t.name.toLowerCase() === 'done' || 
                  t.name.toLowerCase() === '완료'
                );
                
                if (doneTransition) {
                  await jiraRequest(`/rest/api/3/issue/${jiraKey}/transitions`, 'POST', {
                    transition: { id: doneTransition.id }
                  });
                  console.log(`Transitioned ${jiraKey} to Done`);
                }
              } catch (error) {
                console.error('Failed to close Jira issue:', error.message);
              }
            }
            
            // GitHub 이슈 재오픈 시 Jira Task 재오픈
            else if (action === 'reopened') {
              const jiraKey = await findJiraKey();
              
              if (!jiraKey) {
                console.log('No Jira issue found to reopen');
                return;
              }
              
              console.log(`Reopening Jira issue: ${jiraKey}`);
              
              try {
                const transitions = await jiraRequest(`/rest/api/3/issue/${jiraKey}/transitions`, 'GET');
                
                const todoTransition = transitions.transitions.find(t => 
                  t.name.toLowerCase() === 'to do' || 
                  t.name.toLowerCase() === '할 일'
                );
                
                if (todoTransition) {
                  await jiraRequest(`/rest/api/3/issue/${jiraKey}/transitions`, 'POST', {
                    transition: { id: todoTransition.id }
                  });
                  console.log(`Transitioned ${jiraKey} to To Do`);
                }
              } catch (error) {
                console.error('Failed to reopen Jira issue:', error.message);
              }
            }
