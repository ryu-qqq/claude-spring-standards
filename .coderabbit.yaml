# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json

# CodeRabbit Configuration for Spring Standards Project
# This configuration enforces our Zero-Tolerance rules and project conventions

language: ko-KR
tone_instructions: |
  You are an expert Java/Spring Boot code reviewer for a hexagonal architecture project.

  Focus on these CRITICAL Zero-Tolerance rules:
  1. **Lombok 금지**: Never allow @Data, @Builder, @Getter, @Setter in Domain layer
  2. **Law of Demeter**: Flag getter chaining like order.getCustomer().getAddress()
  3. **Long FK Strategy**: Reject @ManyToOne, @OneToMany, @OneToOne, @ManyToMany
  4. **Transaction Boundary**: Never allow external API calls (RestTemplate, WebClient) inside @Transactional
  5. **Spring Proxy**: Reject @Transactional on private/final methods or same-class calls

  Be ASSERTIVE on these rules - they are non-negotiable.
  Be CHILL on style/formatting - our project already has Checkstyle.

early_access: true
enable_free_tier: false

reviews:
  profile: assertive
  high_level_summary: true
  high_level_summary_placeholder: |
    ## 📊 Summary

    This PR implements...

    ### ✅ Compliance Status
    - Zero-Tolerance Rules: [Pass/Fail]
    - Architecture: [Pass/Fail]
    - Testing: [Pass/Fail]

  poem: false
  collapse_walkthrough: false

  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords:
      - "WIP"
      - "Draft"
      - "DO NOT MERGE"
    drafts: false
    base_branches:
      - "main"
      - "develop"
    ignore_usernames:
      - "dependabot"
      - "renovate"

  # 파일 필터링 (빌드 산출물 제외)
  path_filters:
    - "!**/build/**"
    - "!**/target/**"
    - "!**/.gradle/**"
    - "!**/node_modules/**"
    - "!**/*.class"
    - "!**/*.jar"
    - "!**/*.war"

  # Layer별 커스텀 리뷰 규칙
  path_instructions:
    # Domain Layer (가장 엄격)
    - path: "domain/src/main/java/**/*.java"
      instructions: |
        CRITICAL ZERO-TOLERANCE RULES (Must enforce):

        1. **Lombok 절대 금지**
           - ❌ @Data, @Builder, @Getter, @Setter, @Value, @With
           - ✅ Plain Java getters/setters only
           - Reason: Domain은 비즈니스 로직의 핵심, 명시적 코드 필수

        2. **Law of Demeter (Getter 체이닝 금지)**
           - ❌ order.getCustomer().getAddress().getZipCode()
           - ✅ order.getCustomerZipCode()
           - Reason: Tell, Don't Ask 원칙 준수

        3. **No Setters on Aggregate Root**
           - ❌ public void setStatus(OrderStatus status)
           - ✅ public void cancel(CancelReason reason)
           - Reason: 상태 변경은 비즈니스 메서드로만

        4. **Long FK Strategy**
           - ❌ @ManyToOne, @OneToMany (JPA 관계 어노테이션)
           - ✅ private Long customerId;
           - Reason: Domain은 JPA에 의존하지 않음

        5. **Immutability**
           - ✅ final fields where possible
           - ✅ Collections should be unmodifiable

        Architecture:
        - Aggregate Root pattern 준수
        - Value Objects are immutable
        - Domain Events for side effects

    # Application Layer
    - path: "application/src/main/java/**/*UseCase.java"
      instructions: |
        CRITICAL ZERO-TOLERANCE RULES:

        1. **Transaction Boundary Violation**
           - ❌ External API calls (RestTemplate, WebClient, Feign) inside @Transactional
           - ✅ Keep transactions SHORT and ISOLATED
           - Reason: 외부 API는 불안정, 트랜잭션은 DB 작업만

        2. **Spring Proxy Constraints**
           - ❌ @Transactional on private methods
           - ❌ @Transactional on final methods
           - ❌ this.methodWithTransactional() (same-class call)
           - ✅ public methods only, called from other beans

        3. **Single Responsibility**
           - Each UseCase handles ONE business operation
           - Compose multiple UseCases via orchestration

        4. **Command/Query Separation**
           - Commands return void or simple status
           - Queries return DTOs via Assembler

    # Persistence Layer (Adapter-out)
    - path: "adapter-out/persistence-**/src/main/java/**/*.java"
      instructions: |
        CRITICAL RULES:

        1. **Long FK Strategy (엄격)**
           - ❌ @ManyToOne private Customer customer;
           - ✅ @Column private Long customerId;
           - Reason: JPA 관계는 N+1, Lazy Loading 문제 발생

        2. **Entity Immutability**
           - Entities should be immutable after construction
           - Use @Column(updatable = false) where appropriate

        3. **QueryDSL Optimization**
           - Use fetchJoin() for collections
           - Check query execution plans
           - Avoid N+1 problems

        4. **CQRS Separation**
           - Separate read/write repositories
           - Use projections for queries

    # REST API Layer (Adapter-in)
    - path: "adapter-in/rest-api/src/main/java/**/*.java"
      instructions: |
        1. **Controller Thin**
           - No business logic in controllers
           - Only request/response transformation

        2. **GlobalExceptionHandler**
           - All exceptions handled centrally
           - Consistent ApiResponse format

        3. **Validation**
           - Use @Valid for request DTOs
           - Domain validation in Domain layer

        4. **API Versioning**
           - Use /api/v1/ prefix

    # Test Code
    - path: "**/src/test/java/**/*.java"
      instructions: |
        1. **Test Coverage**
           - Domain layer: 90%+ required
           - Application layer: 80%+ required

        2. **Test Patterns**
           - Use Test Fixtures for complex objects
           - Given-When-Then structure
           - Descriptive test names

        3. **ArchUnit**
           - Verify layer dependencies
           - Verify naming conventions

        4. **Integration Tests**
           - Use Testcontainers for DB
           - Clean up test data

  # 도구 활성화 (Java/Spring 전용)
  tools:
    # Java 정적 분석
    pmd:
      enabled: true

    # 보안 스캔
    gitleaks:
      enabled: true

    # Dependency 취약점
    trivy:
      enabled: true

    # Dockerfile 검증
    hadolint:
      enabled: true

    # YAML 검증
    yamllint:
      enabled: true

chat:
  auto_reply: true
  art: false

knowledge_base:
  opt_out: false

  # 프로젝트 컨벤션 파일 자동 학습
  code_guidelines:
    enabled: true
    filePatterns:
      - "**/.claude/CLAUDE.md"
      - "**/docs/coding_convention/**/*.md"
      - "**/.windsurf/rules/**/*.md"
      - "**/CODING_STANDARDS.md"
      - "**/.cursorrules"

  learnings:
    scope: "organization"

  # 외부 지식 통합 (선택)
  web_search:
    enabled: true

code_generation:
  docstrings:
    language: ko-KR
  unit_tests:
    language: ko-KR
