#!/bin/bash
# ========================================
# Single Responsibility Principle Validator
# ========================================
# Îã®Ïùº Ï±ÖÏûÑ ÏõêÏπô (Single Responsibility Principle) Í≤ÄÏ¶ù
# - Î©îÏÑúÎìú Í∞úÏàò Ï†úÌïú
# - ÌÅ¥ÎûòÏä§ ÎùºÏù∏ Ïàò Ï†úÌïú
# - ÏùòÏã¨Ïä§Îü¨Ïö¥ ÎÑ§Ïù¥Î∞ç Í∞êÏßÄ
# - Î†àÏù¥Ïñ¥Î≥Ñ Ï∞®Îì± Ï†ÅÏö©
#
# @author Sangwon Ryu (ryu@company.com)
# @since 2025-01-10
# ========================================

set -e

FILE="$1"

# Java ÌååÏùºÎßå Í≤ÄÏ¶ù
if [[ ! "$FILE" =~ \.java$ ]]; then
    exit 0
fi

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m'

log_error() {
    echo -e "${RED}‚ùå [SRP] $1${NC}" >&2
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  [SRP] $1${NC}" >&2
}

log_info() {
    echo -e "${GREEN}‚ÑπÔ∏è  [SRP] $1${NC}" >&2
}

VIOLATIONS=0

# ========================================
# Î†àÏù¥Ïñ¥ Í∞êÏßÄ
# ========================================

LAYER="unknown"
if [[ "$FILE" == *"/domain/"* ]]; then
    LAYER="domain"
    MAX_METHODS=7
    MAX_LINES=200
elif [[ "$FILE" == *"/application/"* ]]; then
    LAYER="application"
    MAX_METHODS=5
    MAX_LINES=150
elif [[ "$FILE" == *"/adapter/"* ]]; then
    LAYER="adapter"
    MAX_METHODS=10
    MAX_LINES=300
else
    # Í∏∞Î≥∏Í∞í
    MAX_METHODS=10
    MAX_LINES=300
fi

log_info "Checking SRP in: $(basename "$FILE") [$LAYER layer]"

# ========================================
# Ìå®ÌÑ¥ 1: ÌÅ¥ÎûòÏä§ ÎùºÏù∏ Ïàò Ï≤¥ÌÅ¨
# ========================================

CLASS_LINES=$(wc -l < "$FILE" | tr -d ' ')

if [ "$CLASS_LINES" -gt "$MAX_LINES" ]; then
    log_error "Class too long: $CLASS_LINES lines (max: $MAX_LINES for $LAYER)"

    cat << EOF

‚ö†Ô∏è  Îã®Ïùº Ï±ÖÏûÑ ÏõêÏπô ÏúÑÎ∞ò: ÌÅ¥ÎûòÏä§Í∞Ä ÎÑàÎ¨¥ ÍπÄ

ÌååÏùº: $FILE
ÌòÑÏû¨: $CLASS_LINES lines
ÏµúÎåÄ: $MAX_LINES lines ($LAYER layer)

ÏàòÏ†ï Î∞©Î≤ï:
1. ÌÅ¥ÎûòÏä§Î•º Ïó¨Îü¨ Í∞úÎ°ú Î∂ÑÎ¶¨
2. Ï±ÖÏûÑÎ≥ÑÎ°ú ÌÅ¥ÎûòÏä§ ÎÇòÎàÑÍ∏∞
3. Extract Class Î¶¨Ìå©ÌÜ†ÎßÅ Ï†ÅÏö©

ÏòàÏãú:
  // BEFORE (400 lines)
  class UserOrderManager {
      // User Í¥ÄÎ†® Î©îÏÑúÎìú 200 lines
      // Order Í¥ÄÎ†® Î©îÏÑúÎìú 200 lines
  }

  // AFTER
  class UserManager {  // 200 lines
      // User Í¥ÄÎ†®Îßå
  }
  class OrderManager { // 200 lines
      // Order Í¥ÄÎ†®Îßå
  }

EOF
    VIOLATIONS=$((VIOLATIONS + 1))
fi

# ========================================
# Ìå®ÌÑ¥ 2: Public Î©îÏÑúÎìú Í∞úÏàò Ï≤¥ÌÅ¨
# ========================================

# publicÏúºÎ°ú ÏãúÏûëÌïòÎäî Î©îÏÑúÎìú (ÏÉùÏÑ±Ïûê, equals, hashCode, toString Ï†úÏô∏)
PUBLIC_METHOD_COUNT=$(grep -Ec '^\s*public\s+[^\s(]+\s+\w+\s*\(' "$FILE" || true)

# equals, hashCode, toString Ï†úÏô∏
PUBLIC_METHOD_COUNT=$((PUBLIC_METHOD_COUNT - $(grep -c "public.*\(equals\|hashCode\|toString\)" "$FILE" || true)))

if [ "$PUBLIC_METHOD_COUNT" -gt "$MAX_METHODS" ]; then
    log_error "Too many public methods: $PUBLIC_METHOD_COUNT (max: $MAX_METHODS for $LAYER)"

    cat << EOF

‚ö†Ô∏è  Îã®Ïùº Ï±ÖÏûÑ ÏõêÏπô ÏúÑÎ∞ò: Î©îÏÑúÎìúÍ∞Ä ÎÑàÎ¨¥ ÎßéÏùå

ÌååÏùº: $FILE
ÌòÑÏû¨: $PUBLIC_METHOD_COUNT public methods
ÏµúÎåÄ: $MAX_METHODS methods ($LAYER layer)

Ïù¥Ïú†:
- ÎßéÏùÄ Î©îÏÑúÎìú = Ïó¨Îü¨ Ï±ÖÏûÑÏùÑ Îã¥Í≥† ÏûàÏùÑ Í∞ÄÎä•ÏÑ±
- ÌÅ¥ÎûòÏä§ ÏùëÏßëÎèÑÍ∞Ä ÎÇÆÏùÑ Ïàò ÏûàÏùå

ÏàòÏ†ï Î∞©Î≤ï:
1. Í¥ÄÎ†®Îêú Î©îÏÑúÎìúÎÅºÎ¶¨ Î¨∂Ïñ¥ ÏÉà ÌÅ¥ÎûòÏä§Î°ú Ï∂îÏ∂ú
2. Strategy Ìå®ÌÑ¥ Ï†ÅÏö©
3. ÎèÑÎ©îÏù∏ Í∞úÎÖêÎ≥ÑÎ°ú ÌÅ¥ÎûòÏä§ Î∂ÑÎ¶¨

ÏòàÏãú ($LAYER layer):
EOF

    if [[ "$LAYER" == "domain" ]]; then
        cat << EOF
  // BEFORE
  class Order {
      // Ï£ºÎ¨∏ ÏÉùÏÑ±/ÏàòÏ†ï/ÏÇ≠Ï†ú
      // Í≤∞Ï†ú Ï≤òÎ¶¨
      // Î∞∞ÏÜ° Í¥ÄÎ¶¨
      // ÏïåÎ¶º Î∞úÏÜ°
      // 10+ Î©îÏÑúÎìú
  }

  // AFTER
  class Order {
      // Ï£ºÎ¨∏ ÏÉùÏï†Ï£ºÍ∏∞Îßå (‚â§ 7 Î©îÏÑúÎìú)
  }
  class Payment { }
  class Delivery { }
  class Notification { }
EOF
    elif [[ "$LAYER" == "application" ]]; then
        cat << EOF
  // BEFORE
  class OrderService {
      createOrder()
      updateOrder()
      cancelOrder()
      processPayment()
      shipOrder()
      // 8+ Î©îÏÑúÎìú = Ïó¨Îü¨ UseCase ÌòºÏû¨
  }

  // AFTER
  class CreateOrderUseCase { execute() }
  class UpdateOrderUseCase { execute() }
  class CancelOrderUseCase { execute() }
  class ProcessPaymentUseCase { execute() }
  // Í∞ÅÍ∞Å ‚â§ 5 Î©îÏÑúÎìú
EOF
    fi

    echo ""
    VIOLATIONS=$((VIOLATIONS + 1))
fi

# ========================================
# Ìå®ÌÑ¥ 3: ÏùòÏã¨Ïä§Îü¨Ïö¥ ÎÑ§Ïù¥Î∞ç
# ========================================

BASENAME=$(basename "$FILE" .java)

# God Object ÏùòÏã¨ ÎÑ§Ïù¥Î∞ç
if [[ "$BASENAME" =~ (Manager|Helper|Util|Handler|Processor|Controller|Service)$ ]]; then
    # Controller, ServiceÎäî Î†àÏù¥Ïñ¥ Ïù¥Î¶ÑÏúºÎ°ú ÌóàÏö©
    if [[ "$BASENAME" =~ (Manager|Helper|Util|Handler|Processor)$ ]]; then
        log_warning "Suspicious class name: $BASENAME"

        cat << EOF

‚ö†Ô∏è  ÏùòÏã¨Ïä§Îü¨Ïö¥ ÌÅ¥ÎûòÏä§ ÎÑ§Ïù¥Î∞ç

ÌååÏùº: $FILE
ÌÅ¥ÎûòÏä§Î™Ö: $BASENAME

Î¨∏Ï†ú:
- "Manager", "Helper", "Util" Îì±ÏùÄ God Class ÏßïÌõÑ
- Î™ÖÌôïÌïú Ï±ÖÏûÑÏùÑ ÎÇòÌÉÄÎÇ¥ÏßÄ Î™ªÌï®

ÏàòÏ†ï Î∞©Î≤ï:
1. Íµ¨Ï≤¥Ï†ÅÏù∏ ÎèÑÎ©îÏù∏ Í∞úÎÖêÏúºÎ°ú Ïù¥Î¶Ñ Î≥ÄÍ≤Ω
2. Ïã§Ï†úÎ°ú ÌïòÎäî ÏùºÏùÑ Ïù¥Î¶ÑÏóê Î∞òÏòÅ

ÏòàÏãú:
  ‚ùå UserManager
  ‚úÖ UserRegistrar, UserAuthenticator, UserProfileUpdater

  ‚ùå OrderHelper
  ‚úÖ OrderValidator, OrderCalculator, OrderNotifier

  ‚ùå DataUtil
  ‚úÖ DataFormatter, DataValidator, DataTransformer

EOF
        VIOLATIONS=$((VIOLATIONS + 1))
    fi
fi

# "And" Ìè¨Ìï® = Ïó¨Îü¨ Ï±ÖÏûÑ
if [[ "$BASENAME" =~ And ]]; then
    log_error "Class name contains 'And': $BASENAME - multiple responsibilities"

    cat << EOF

‚ö†Ô∏è  ÌÅ¥ÎûòÏä§ Ïù¥Î¶ÑÏóê "And" Ìè¨Ìï®

ÌååÏùº: $FILE
ÌÅ¥ÎûòÏä§Î™Ö: $BASENAME

Î¨∏Ï†ú:
- "And"Îäî Ïó¨Îü¨ Ï±ÖÏûÑÏùÑ ÏïîÏãú
- ÌïòÎÇòÏùò ÌÅ¥ÎûòÏä§Í∞Ä Îëê Í∞ÄÏßÄ ÏùºÏùÑ Ìï®

ÏàòÏ†ï Î∞©Î≤ï:
- Îëê Í∞úÏùò ÌÅ¥ÎûòÏä§Î°ú Î∂ÑÎ¶¨

ÏòàÏãú:
  ‚ùå UserAndOrderManager
  ‚úÖ UserManager + OrderManager

  ‚ùå ValidateAndSaveService
  ‚úÖ Validator + Saver

EOF
    VIOLATIONS=$((VIOLATIONS + 1))
fi

# ========================================
# Ìå®ÌÑ¥ 4: Í≥ºÎèÑÌïú ÌïÑÎìú Í∞úÏàò
# ========================================

# private ÌïÑÎìú Í∞úÏàò (static Ï†úÏô∏)
FIELD_COUNT=$(grep -Ec '^\s*private\s+[^\s]+\s+\w+\s*;' "$FILE" || true)
FIELD_COUNT=$((FIELD_COUNT - $(grep -c "private\s\+static" "$FILE" || true)))

MAX_FIELDS=7
if [ "$FIELD_COUNT" -gt "$MAX_FIELDS" ]; then
    log_warning "Too many fields: $FIELD_COUNT (max: $MAX_FIELDS)"

    cat << EOF

‚ö†Ô∏è  ÌïÑÎìúÍ∞Ä ÎÑàÎ¨¥ ÎßéÏùå (ÏùëÏßëÎèÑ Î¨∏Ï†ú ÏùòÏã¨)

ÌååÏùº: $FILE
ÌòÑÏû¨: $FIELD_COUNT instance fields
Í∂åÏû•: ‚â§ $MAX_FIELDS fields

Ïù¥Ïú†:
- ÎßéÏùÄ ÌïÑÎìú = Ïó¨Îü¨ Í¥ÄÏã¨ÏÇ¨ ÌòºÏû¨ Í∞ÄÎä•ÏÑ±
- LCOM (Lack of Cohesion) ÎÜíÏùÑ Ïàò ÏûàÏùå

ÌôïÏù∏ ÏÇ¨Ìï≠:
1. Î™®Îì† Î©îÏÑúÎìúÍ∞Ä Î™®Îì† ÌïÑÎìúÎ•º ÏÇ¨Ïö©ÌïòÎäîÍ∞Ä?
2. ÏùºÎ∂Ä Î©îÏÑúÎìúÎßå ÌäπÏ†ï ÌïÑÎìúÎ•º ÏÇ¨Ïö©ÌïòÎäîÍ∞Ä?
3. ÌïÑÎìúÎ•º Í∑∏Î£πÏúºÎ°ú Î¨∂ÏùÑ Ïàò ÏûàÎäîÍ∞Ä?

ÏàòÏ†ï Î∞©Î≤ï:
- Í¥ÄÎ†® ÌïÑÎìúÎÅºÎ¶¨ Î¨∂Ïñ¥ Value ObjectÎ°ú Ï∂îÏ∂ú

ÏòàÏãú:
  // BEFORE
  class User {
      String street;
      String city;
      String zipCode;
      String country;
      // + Îã§Î•∏ ÌïÑÎìúÎì§
  }

  // AFTER
  class User {
      Address address;  // Value Object
      // + Îã§Î•∏ ÌïÑÎìúÎì§
  }

  class Address {
      String street;
      String city;
      String zipCode;
      String country;
  }

EOF
fi

# ========================================
# ÌóàÏö© Ìå®ÌÑ¥ ÌôïÏù∏
# ========================================

# RecordÎäî ÌïÑÎìú ÎßéÏïÑÎèÑ OK (Data Transfer Object)
if grep -q "public record" "$FILE"; then
    log_info "Record detected (Data class allowed)"
    exit 0
fi

# InterfaceÎäî Î©îÏÑúÎìú ÎßéÏïÑÎèÑ OK
if grep -q "public interface" "$FILE"; then
    log_info "Interface detected (Multiple methods allowed)"
    exit 0
fi

# Exception ÌÅ¥ÎûòÏä§Îäî OK
if [[ "$BASENAME" =~ Exception$ ]]; then
    log_info "Exception class detected (allowed)"
    exit 0
fi

# ========================================
# Í≤∞Í≥º Î∞òÌôò
# ========================================

if [ $VIOLATIONS -gt 0 ]; then
    log_error "Found $VIOLATIONS SRP violation(s)"
    log_warning "Please refactor to follow Single Responsibility Principle"

    cat << EOF

üìö Ï∂îÏ≤ú Î¶¨Ìå©ÌÜ†ÎßÅ Ï†ÑÎûµ:

1. Extract Class (ÌÅ¥ÎûòÏä§ Ï∂îÏ∂ú)
   - Í¥ÄÎ†®Îêú Î©îÏÑúÎìúÏôÄ ÌïÑÎìúÎ•º ÏÉà ÌÅ¥ÎûòÏä§Î°ú Ïù¥Îèô

2. Extract Method (Î©îÏÑúÎìú Ï∂îÏ∂ú)
   - Í∏¥ Î©îÏÑúÎìúÎ•º ÏûëÏùÄ Î©îÏÑúÎìúÎ°ú Î∂ÑÎ¶¨
   - Í∞Å Î©îÏÑúÎìúÎäî Ìïú Í∞ÄÏßÄ ÏùºÎßå

3. ÎèÑÎ©îÏù∏ Í∞úÎÖê Î™ÖÌôïÌôî
   - ÌÅ¥ÎûòÏä§ Ïù¥Î¶ÑÏù¥ ÌïòÎäî ÏùºÏùÑ Ï†ïÌôïÌûà ÌëúÌòÑ
   - Ï∂îÏÉÅÏ†ÅÏù∏ Ïù¥Î¶Ñ(Manager, Util) Í∏àÏßÄ

4. LCOM Ï∏°Ï†ï
   - PMDÏùò GodClass Í∑úÏπô ÌôúÏö©
   - ÏùëÏßëÎèÑ ÎÜíÏù¥Í∏∞

Ï∞∏Í≥† Î¨∏ÏÑú:
- config/pmd/pmd-ruleset.xml (PMD Í∑úÏπô)
- SingleResponsibilityTest.java (ArchUnit ÌÖåÏä§Ìä∏)
EOF

    exit 1
fi

log_info "‚úÖ Single Responsibility Principle validation passed"
exit 0
