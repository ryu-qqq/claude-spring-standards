#!/bin/bash
# ========================================
# Master Pre-Commit Hook
# ========================================
# Intelligent routing to module-specific validators
# Enforces hexagonal architecture boundaries
# Detects dead code before commit
# ========================================

set -e  # Exit on first error

HOOKS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VALIDATORS_DIR="$HOOKS_DIR/validators"
PROJECT_ROOT="$(cd "$HOOKS_DIR/.." && pwd)"

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ========================================
# Helper Functions
# ========================================

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# ========================================
# Get Changed Files
# ========================================

log_info "Analyzing staged changes..."

CHANGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR)

if [ -z "$CHANGED_FILES" ]; then
    log_warning "No files staged for commit"
    exit 0
fi

# ========================================
# Module Detection and Routing
# ========================================

DOMAIN_FILES=()
APPLICATION_FILES=()
ADAPTER_IN_FILES=()
ADAPTER_OUT_FILES=()
PERSISTENCE_FILES=()
CONTROLLER_FILES=()
BOOTSTRAP_FILES=()
OTHER_FILES=()

while IFS= read -r file; do
    if [[ $file == domain/* ]]; then
        DOMAIN_FILES+=("$file")
    elif [[ $file == application/* ]]; then
        APPLICATION_FILES+=("$file")
    elif [[ $file == adapter/adapter-out-persistence-jpa/* ]]; then
        PERSISTENCE_FILES+=("$file")
    elif [[ $file == adapter/adapter-in-admin-web/* ]]; then
        CONTROLLER_FILES+=("$file")
    elif [[ $file == adapter/adapter-in-* ]]; then
        ADAPTER_IN_FILES+=("$file")
    elif [[ $file == adapter/adapter-out-* ]]; then
        ADAPTER_OUT_FILES+=("$file")
    elif [[ $file == bootstrap/* ]]; then
        BOOTSTRAP_FILES+=("$file")
    else
        OTHER_FILES+=("$file")
    fi
done <<< "$CHANGED_FILES"

# ========================================
# Validation Summary
# ========================================

log_info "Changed files by module:"
[ ${#DOMAIN_FILES[@]} -gt 0 ] && echo "  üì¶ Domain: ${#DOMAIN_FILES[@]} files"
[ ${#APPLICATION_FILES[@]} -gt 0 ] && echo "  üîß Application: ${#APPLICATION_FILES[@]} files"
[ ${#PERSISTENCE_FILES[@]} -gt 0 ] && echo "  üíæ Persistence: ${#PERSISTENCE_FILES[@]} files"
[ ${#CONTROLLER_FILES[@]} -gt 0 ] && echo "  üåê Controller: ${#CONTROLLER_FILES[@]} files"
[ ${#ADAPTER_IN_FILES[@]} -gt 0 ] && echo "  üì• Adapter-In: ${#ADAPTER_IN_FILES[@]} files"
[ ${#ADAPTER_OUT_FILES[@]} -gt 0 ] && echo "  üì§ Adapter-Out: ${#ADAPTER_OUT_FILES[@]} files"
[ ${#BOOTSTRAP_FILES[@]} -gt 0 ] && echo "  üöÄ Bootstrap: ${#BOOTSTRAP_FILES[@]} files"
[ ${#OTHER_FILES[@]} -gt 0 ] && echo "  üìÑ Other: ${#OTHER_FILES[@]} files"

# ========================================
# Module-Specific Validation
# ========================================

VALIDATION_FAILED=0

# Domain validation
if [ ${#DOMAIN_FILES[@]} -gt 0 ]; then
    log_info "Validating Domain module..."
    if bash "$VALIDATORS_DIR/domain-validator.sh" "${DOMAIN_FILES[@]}"; then
        log_success "Domain validation passed"
    else
        log_error "Domain validation failed"
        VALIDATION_FAILED=1
    fi
fi

# Application validation
if [ ${#APPLICATION_FILES[@]} -gt 0 ]; then
    log_info "Validating Application module..."
    if bash "$VALIDATORS_DIR/application-validator.sh" "${APPLICATION_FILES[@]}"; then
        log_success "Application validation passed"
    else
        log_error "Application validation failed"
        VALIDATION_FAILED=1
    fi
fi

# Adapter-In validation
if [ ${#ADAPTER_IN_FILES[@]} -gt 0 ]; then
    log_info "Validating Adapter-In modules..."
    if bash "$VALIDATORS_DIR/adapter-in-validator.sh" "${ADAPTER_IN_FILES[@]}"; then
        log_success "Adapter-In validation passed"
    else
        log_error "Adapter-In validation failed"
        VALIDATION_FAILED=1
    fi
fi

# Persistence validation (specific)
if [ ${#PERSISTENCE_FILES[@]} -gt 0 ]; then
    log_info "Validating Persistence module..."
    if bash "$VALIDATORS_DIR/persistence-validator.sh" "${PERSISTENCE_FILES[@]}"; then
        log_success "Persistence validation passed"
    else
        log_error "Persistence validation failed"
        VALIDATION_FAILED=1
    fi
fi

# Controller validation (specific)
if [ ${#CONTROLLER_FILES[@]} -gt 0 ]; then
    log_info "Validating Controller module..."
    if bash "$VALIDATORS_DIR/controller-validator.sh" "${CONTROLLER_FILES[@]}"; then
        log_success "Controller validation passed"
    else
        log_error "Controller validation failed"
        VALIDATION_FAILED=1
    fi
fi

# Adapter-Out validation (general)
if [ ${#ADAPTER_OUT_FILES[@]} -gt 0 ]; then
    log_info "Validating Adapter-Out modules..."
    if bash "$VALIDATORS_DIR/adapter-out-validator.sh" "${ADAPTER_OUT_FILES[@]}"; then
        log_success "Adapter-Out validation passed"
    else
        log_error "Adapter-Out validation failed"
        VALIDATION_FAILED=1
    fi
fi

# ========================================
# Common Validation (All Files)
# ========================================

log_info "Running common validation..."
if bash "$VALIDATORS_DIR/common-validator.sh" $CHANGED_FILES; then
    log_success "Common validation passed"
else
    log_warning "Common validation produced warnings (proceeding)"
fi

# ========================================
# Dead Code Detection
# ========================================

log_info "Detecting dead code..."
if bash "$VALIDATORS_DIR/dead-code-detector.sh" $CHANGED_FILES; then
    log_success "No dead code detected"
else
    log_warning "Potential dead code detected (review suggested)"
fi

# ========================================
# ArchUnit Tests
# ========================================

log_info "Running ArchUnit architecture tests..."
cd "$PROJECT_ROOT"

if ./gradlew :domain:test --tests "*HexagonalArchitectureTest" -q; then
    log_success "ArchUnit tests passed"
else
    log_error "ArchUnit tests failed - architecture violation detected"
    VALIDATION_FAILED=1
fi

# ========================================
# Final Result
# ========================================

echo ""
echo "========================================"
if [ $VALIDATION_FAILED -eq 0 ]; then
    log_success "All validations passed! ‚ú®"
    echo "========================================"
    exit 0
else
    log_error "Validation failed - commit blocked"
    echo "========================================"
    echo ""
    echo "Fix the issues above and try again."
    echo "Or use --no-verify to skip (NOT RECOMMENDED)"
    exit 1
fi
