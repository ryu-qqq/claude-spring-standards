# Orchestration Pattern Boilerplate 생성 워크플로우
# Windsurf IDE (Cascade)에서 참고하는 체계적인 가이드
# 실제 파일 생성은 Cascade가 .windsurf/rules/*.md와 templates/*.java를 참고하여 수행

name: "Create Orchestration Pattern Boilerplate"
description: "외부 API 호출을 위한 Orchestration Pattern 전체 구조를 생성합니다 (Command, Orchestrator, Entities, Repositories, Schedulers, Controller, Tests)"
version: "1.0.0"
author: "Claude Spring Standards"
tags: ["orchestration", "boilerplate", "pattern", "java21", "spring-boot"]

# 워크플로우 트리거
triggers:
  keywords: ["orchestrator", "orchestration", "외부 API", "외부 호출", "idempotency", "멱등성"]
  patterns:
    - ".*Orchestrator.*를 생성.*"
    - ".*오케스트레이터.*만들.*"
    - ".*외부 API.*패턴.*"

# 입력 파라미터
inputs:
  domain:
    type: string
    description: "Domain 이름 (예: Payment, FileUpload, Notification)"
    required: true
    example: "Payment"

  eventType:
    type: string
    description: "EventType 이름 (예: PaymentRequested, FileUploadRequested)"
    required: true
    example: "PaymentRequested"

  externalApi:
    type: string
    description: "외부 API 설명 (예: PaymentGateway, S3Client, FCMClient)"
    required: false
    default: "ExternalApiClient"

# 생성 단계 (Cascade가 참고)
steps:
  # Step 1: Command Record 생성
  - name: "Generate Command Record"
    description: "IdemKey를 포함한 Command Record 패턴 생성"
    reference_rule: ".windsurf/rules/09-orchestration-layer.md"
    reference_template: ".windsurf/templates/orchestration/command.java"
    output:
      path: "application/src/main/java/com/ryuqq/application/{domain_lower}/command/{Domain}Command.java"
      pattern: "Record 패턴"
      checklist:
        - "Record 키워드 사용 (Lombok 금지)"
        - "Compact Constructor 검증 (Objects.requireNonNull)"
        - "Javadoc 작성 (@author, @since)"
        - "IdemKey 필드 포함 (String idempotencyKey)"
    validation:
      - "Lombok 어노테이션 없음 (@Data, @Builder 등)"
      - "Compact Constructor에 null 체크"
      - "@author, @since 존재"

  # Step 2: Orchestrator 스켈레톤 생성
  - name: "Generate Orchestrator Skeleton"
    description: "BaseOrchestrator를 상속한 Orchestrator 스켈레톤 생성"
    reference_rule: ".windsurf/rules/09-orchestration-layer.md"
    reference_template: ".windsurf/templates/orchestration/orchestrator.java"
    output:
      path: "application/src/main/java/com/ryuqq/application/{domain_lower}/{Domain}Orchestrator.java"
      pattern: "BaseOrchestrator 상속"
      checklist:
        - "BaseOrchestrator<{Domain}Command> 상속"
        - "domain(), eventType() 오버라이드"
        - "executeInternal() @Async 선언"
        - "Retry 전략 구현 (calculateBackoff)"
        - "Error 분류 (TransientException vs PermanentException)"
        - "Dependencies 주입 (ExternalApiClient 등)"
    developer_todo:
      - "executeInternal() 비즈니스 로직 구현 필요"
      - "외부 API 호출 코드 작성"
      - "Outcome 반환 로직 작성 (Ok/Retry/Fail)"
    validation:
      - "executeInternal()에 @Async 존재"
      - "executeInternal()에 @Transactional 없음"
      - "domain(), eventType() 메서드 존재"

  # Step 3: Entities 생성
  - name: "Generate Entities"
    description: "Operation, WriteAheadLog 엔티티 생성"
    reference_rule: ".windsurf/rules/09-orchestration-layer.md"
    reference_template: ".windsurf/templates/orchestration/entities/"
    outputs:
      - path: "adapter-out/persistence-mysql/src/main/java/com/ryuqq/adapter/out/persistence/{domain_lower}/entity/{Domain}OperationEntity.java"
        pattern: "JPA Entity"
        checklist:
          - "@Entity, @Table 어노테이션"
          - "IdemKey Unique 제약 (@Table(uniqueConstraints = ...))"
          - "Long FK 전략 (관계 어노테이션 금지)"
          - "Javadoc 작성"
      - path: "adapter-out/persistence-mysql/src/main/java/com/ryuqq/adapter/out/persistence/{domain_lower}/entity/{Domain}WriteAheadLogEntity.java"
        pattern: "JPA Entity"
        checklist:
          - "@Entity, @Table 어노테이션"
          - "opId 외래키 (Long 타입)"
          - "state 컬럼 (PENDING/COMPLETED)"
          - "인덱스 정의 (@Table(indexes = ...))"
    validation:
      - "JPA 관계 어노테이션 없음 (@ManyToOne, @OneToMany 등)"
      - "IdemKey에 Unique 제약 존재"

  # Step 4: Repositories 생성
  - name: "Generate Repositories"
    description: "OperationRepository, WriteAheadLogRepository 생성"
    reference_rule: ".windsurf/rules/09-orchestration-layer.md"
    reference_template: ".windsurf/templates/orchestration/repositories/"
    outputs:
      - path: "adapter-out/persistence-mysql/src/main/java/com/ryuqq/adapter/out/persistence/{domain_lower}/repository/{Domain}OperationRepository.java"
        pattern: "JpaRepository 상속"
        checklist:
          - "JpaRepository<{Domain}OperationEntity, String> 상속"
          - "findByIdemKey() 메서드"
          - "updateState() 메서드"
      - path: "adapter-out/persistence-mysql/src/main/java/com/ryuqq/adapter/out/persistence/{domain_lower}/repository/{Domain}WriteAheadLogRepository.java"
        pattern: "JpaRepository 상속"
        checklist:
          - "JpaRepository<{Domain}WriteAheadLogEntity, Long> 상속"
          - "findByState() 메서드"
          - "markCompleted() 메서드"
    validation:
      - "JpaRepository 상속 확인"
      - "Query 메서드 시그니처 정확성"

  # Step 5: Schedulers 생성
  - name: "Generate Schedulers"
    description: "Finalizer, Reaper 스케줄러 생성"
    reference_rule: ".windsurf/rules/09-orchestration-layer.md"
    reference_template: ".windsurf/templates/orchestration/schedulers/"
    outputs:
      - path: "application/src/main/java/com/ryuqq/application/{domain_lower}/scheduler/{Domain}Finalizer.java"
        pattern: "@Scheduled Finalizer"
        checklist:
          - "@Component 어노테이션"
          - "@Scheduled(fixedDelay = 5000)"
          - "processPendingWal() 메서드"
          - "PENDING WAL 조회 및 처리 로직"
      - path: "application/src/main/java/com/ryuqq/application/{domain_lower}/scheduler/{Domain}Reaper.java"
        pattern: "@Scheduled Reaper"
        checklist:
          - "@Component 어노테이션"
          - "@Scheduled(fixedDelay = 10000)"
          - "processTimeoutOperations() 메서드"
          - "MAX_ATTEMPTS 초과 처리 로직"
    validation:
      - "@Scheduled 어노테이션 존재"
      - "fixedDelay 값 적절성"

  # Step 6: Controller 스켈레톤 생성
  - name: "Generate Controller Skeleton"
    description: "REST API 엔드포인트 스켈레톤 생성"
    reference_rule: ".windsurf/rules/09-orchestration-layer.md"
    reference_template: ".windsurf/templates/orchestration/controller.java"
    output:
      path: "adapter-in/adapter-in-web/src/main/java/com/ryuqq/adapter/in/web/{domain_lower}/{Domain}Controller.java"
      pattern: "@RestController"
      checklist:
        - "@RestController, @RequestMapping 어노테이션"
        - "POST 엔드포인트 (멱등성 보장)"
        - "202 Accepted 응답 (비동기 처리)"
        - "Outcome → Response DTO 매핑"
    developer_todo:
      - "Response DTO 매핑 로직 구현"
      - "에러 핸들링 추가"
    validation:
      - "POST 메서드만 존재"
      - "ResponseEntity 반환 타입"

  # Step 7: Tests 생성
  - name: "Generate Tests"
    description: "Orchestration Pattern 테스트 생성"
    reference_rule: ".windsurf/rules/09-orchestration-layer.md"
    reference_template: ".windsurf/templates/orchestration/tests/"
    outputs:
      - path: "application/src/test/java/com/ryuqq/application/{domain_lower}/{Domain}OrchestratorTest.java"
        pattern: "Unit Test"
        checklist:
          - "Idempotency 테스트 (동일 IdemKey 재요청)"
          - "Retry 테스트 (일시적 오류)"
          - "Fail 테스트 (영구적 오류)"
          - "@MockBean 사용"
      - path: "bootstrap/bootstrap-web-api/src/test/java/com/ryuqq/bootstrap/integration/{domain_lower}/{Domain}IntegrationTest.java"
        pattern: "Integration Test"
        checklist:
          - "@SpringBootTest 어노테이션"
          - "WAL 테스트 (Crash Recovery)"
          - "Timeout 테스트 (Reaper)"
          - "Race Condition 테스트 (동시 요청)"
    developer_todo:
      - "비즈니스 로직별 엣지 케이스 추가"
    validation:
      - "@Test 어노테이션 존재"
      - "Assert 구문 존재"

# Post-generation 단계
post_steps:
  - name: "Validation"
    description: "생성된 코드 검증"
    actions:
      - "validation-helper.py 실행"
      - "Lombok 사용 여부 확인"
      - "@Transactional + @Async 충돌 확인"
      - "IdemKey Unique 제약 확인"

  - name: "Display TODO"
    description: "개발자가 구현해야 할 TODO 표시"
    output: |
      ✅ Boilerplate 생성 완료!

      📝 개발자 TODO:
      1. {Domain}Orchestrator.executeInternal() 구현
         - 외부 API 호출 코드 작성
         - Outcome 반환 로직 작성 (Ok/Retry/Fail)

      2. {Domain}Controller Response DTO 매핑
         - Outcome → Response DTO 변환

      3. Tests 엣지 케이스 추가
         - 비즈니스 로직별 특수 케이스

      4. 검증 실행
         ./gradlew test
         /validate-architecture

# 에러 처리
error_handling:
  - condition: "파일 이미 존재"
    action: "사용자에게 덮어쓰기 여부 확인"

  - condition: "패키지 구조 불일치"
    action: "프로젝트 구조 분석 후 올바른 경로 추천"

  - condition: "검증 실패"
    action: "생성된 파일 롤백, 오류 메시지 표시"

# 성공 메트릭
success_metrics:
  automation_rate: "80-85%"
  expected_time: "5-10분 (기존 2-3시간 대비 70-80% 단축)"
  convention_compliance: "90-95%"
  developer_intervention_required:
    - "executeInternal() 비즈니스 로직 (15-20분)"
    - "Response DTO 매핑 (5분)"
    - "엣지 케이스 테스트 (10분)"

# 참고 문서
references:
  rules: ".windsurf/rules/09-orchestration-layer.md"
  templates: ".windsurf/templates/orchestration/"
  documentation: "docs/coding_convention/09-orchestration-patterns/"
  examples: "docs/coding_convention/09-orchestration-patterns/05_quick-start-guide.md"
